@using System.Timers
<div class="star-menu">
    <div class="star-menu-fixed @(_isChangingSelsction ? "enabled" : "")">
        <div class="star-menu-rotating" style="transform: rotate(@(_angle)deg);">
            @for (int i = 0; i < MenuItems.Count; i++)
            {
                <div class="menu-item @i @(i == _selectedIndex ? "selected" : "unselected")" style="transform: rotate(@(-i * 45)deg) translateX(@(i == _selectedIndex && !_isChangingSelsction ? "300" : "220")px) rotate(@(i * 45)deg)">

                    if()
                    <div style="transform: rotate(@(-_angle)deg) @(i == _selectedIndex ? $"scale({(_isChangingSelsction ? "2" : "1.5")})" : "");" class="icon">
                        <i class="bi @MenuItems[i]"></i>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<string> MenuItems { get; set; }

    [Parameter]
    public EventCallback SelectedIndexChange { get; set; }

    private bool _isRotating = false;
    private int _initialIndex = 0;
    private int _selectedIndex = 0;
    private int _angleIncrementer = 0;
    private int _angle => _angleIncrementer * 45;
    private bool _isChangingSelsction = false;
    private readonly System.Timers.Timer _timer = new(1500) { AutoReset = false };


    protected override void OnInitialized() => _timer.Elapsed += TimerElapsed;

    public async Task<int> SetSelectedIndexAsync(int targetIndex)
    {
        if (!_isRotating)
        {
            try
            {
                if (!_isChangingSelsction)
                {
                    _isChangingSelsction = true;
                    StateHasChanged();
                    await Task.Delay(250);
                }
                _timer.Stop();
                _timer.Start();
                _isRotating = true;
                if (targetIndex < 0)
                    targetIndex = 0;
                else if (targetIndex >= MenuItems.Count)
                    targetIndex = MenuItems.Count - 1;
                var distance = targetIndex - _selectedIndex;
                _angleIncrementer += distance;
                _selectedIndex = targetIndex;
                StateHasChanged();
                await Task.Delay(250);
            }
            finally
            {
                _isRotating = false;
            }
        }
        return targetIndex;
    }

    private async void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        _isChangingSelsction = false;
        StateHasChanged();
        if (_selectedIndex != _initialIndex)
        {
            _initialIndex = _selectedIndex;
            await SelectedIndexChange.InvokeAsync(_selectedIndex);
            StateHasChanged();
        }
    }
}


